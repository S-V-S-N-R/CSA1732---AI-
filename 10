import heapq

def a_star(graph, start, goal, h):
   
    open_set = [(0 + h(start, goal), start, [start])]
    g_costs = {start: 0}
    
    while open_set:
        _, current, path = heapq.heappop(open_set)
        
        if current == goal:
            return path, g_costs[current]
        
        for neighbor, weight in graph[current].items():
            tentative_g_cost = g_costs[current] + weight
            
            if neighbor not in g_costs or tentative_g_cost < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g_cost
                f_cost = tentative_g_cost + h(neighbor, goal)
                heapq.heappush(open_set, (f_cost, neighbor, path + [neighbor]))
    
    return None, float('inf')  

def heuristic(node, goal):
   
    return 0

graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

start_node = 'A'
goal_node = 'D'
path, cost = a_star(graph, start_node, goal_node, heuristic)
print(f"Shortest path from {start_node} to {goal_node} is {path} with cost {cost}")
