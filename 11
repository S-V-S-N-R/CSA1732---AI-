def is_valid(graph, node, color, colors):
    for neighbor in graph[node]:
        if neighbor in colors and colors[neighbor] == color:
            return False
    return True

def select_unassigned_variable(assignment, graph):
    for node in graph:
        if node not in assignment:
            return node
    return None

def order_domain_values(node, assignment, domains):
    return domains[node]

def forward_checking(graph, assignment, domains):
    for node in assignment:
        for neighbor in graph[node]:
            if neighbor not in assignment:
                if assignment[node] in domains[neighbor]:
                    domains[neighbor].remove(assignment[node])
                    if not domains[neighbor]:
                        return False
    return True

def backtrack(graph, assignment, domains, color_options):
    if len(assignment) == len(graph):
        return assignment

    node = select_unassigned_variable(assignment, graph)
    for color in order_domain_values(node, assignment, domains):
        if is_valid(graph, node, color, assignment):
            assignment[node] = color
            local_domains = {k: list(v) for k, v in domains.items()}
            if forward_checking(graph, assignment, local_domains):
                result = backtrack(graph, assignment, local_domains, color_options)
                if result:
                    return result
            assignment.pop(node)
    
    return None

def map_coloring(graph, color_options):
    domains = {node: list(color_options) for node in graph}
    assignment = {}
    return backtrack(graph, assignment, domains, color_options)

# Example usage:
graph = {
    0: [1, 2],
    1: [0, 2, 3],
    2: [0, 1, 3],
    3: [1, 2]
}

color_options = ['Red', 'Green', 'Blue']

solution = map_coloring(graph, color_options)
if solution:
    print("Coloring of the map:", solution)
else:
    print("No solution exists")
