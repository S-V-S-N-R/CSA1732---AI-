import math

def minimax_with_alpha_beta(board, depth, alpha, beta, is_maximizing):
    if check_winner(board, 'X'):
        return -1
    elif check_winner(board, 'O'):
        return 1
    elif check_draw(board):
        return 0
    
    if is_maximizing:
        max_score = -math.inf
        for move in possible_moves(board):
            board[move] = 'O'
            score = minimax_with_alpha_beta(board, depth+1, alpha, beta, False)
            board[move] = ' '  # Undo the move
            max_score = max(score, max_score)
            alpha = max(alpha, score)
            if beta <= alpha:
                break  # Beta cut-off
        return max_score
    else:
        min_score = math.inf
        for move in possible_moves(board):
            board[move] = 'X'
            score = minimax_with_alpha_beta(board, depth+1, alpha, beta, True)
            board[move] = ' '  # Undo the move
            min_score = min(score, min_score)
            beta = min(beta, score)
            if beta <= alpha:
                break  # Alpha cut-off
        return min_score

def find_best_move_with_alpha_beta(board):
    best_score = -math.inf
    best_move = None
    alpha = -math.inf
    beta = math.inf
    for move in possible_moves(board):
        board[move] = 'O'
        score = minimax_with_alpha_beta(board, 0, alpha, beta, False)
        board[move] = ' '  # Undo the move
        if score > best_score:
            best_score = score
            best_move = move
            alpha = max(alpha, score)
    return best_move

# Example functions (implement according to your game)
def check_winner(board, player):
    pass

def check_draw(board):
    pass

def possible_moves(board):
    return [i for i, val in enumerate(board) if val == ' ']

# Example usage:
board = ['X', ' ', 'O',
         ' ', ' ', ' ',
         ' ', ' ', ' ']

best_move = find_best_move_with_alpha_beta(board)
print("Best move for 'O':", best_move)
