from collections import deque

class State:
    def __init__(self, missionaries, cannibals, boat, parent=None):
        self.missionaries = missionaries
        self.cannibals = cannibals
        self.boat = boat
        self.parent = parent

    def __repr__(self):
        return f"({self.missionaries}, {self.cannibals}, {self.boat})"

    def is_valid(self):
        if self.missionaries < 0 or self.missionaries > 3:
            return False
        if self.cannibals < 0 or self.cannibals > 3:
            return False
        if self.missionaries < self.cannibals and self.missionaries > 0:
            return False
        if 3 - self.missionaries < 3 - self.cannibals and 3 - self.missionaries > 0:
            return False
        return True

    def is_goal(self):
        return self.missionaries == 0 and self.cannibals == 0 and self.boat == 0

    def successors(self):
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        if self.boat == 1:
            moves = [(-m, -c) for m, c in moves]

        for m, c in moves:
            new_state = State(self.missionaries + m, self.cannibals + c, 1 - self.boat, self)
            if new_state.is_valid():
                yield new_state

def bfs(initial_state):
    visited = set()
    queue = deque([initial_state])

    while queue:
        current_state = queue.popleft()
        if current_state.is_goal():
            return current_state
        visited.add(current_state)

        for next_state in current_state.successors():
            if next_state not in visited:
                queue.append(next_state)

    return None

def print_solution(solution):
    path = []
    while solution:
        path.append(solution)
        solution = solution.parent
    path.reverse()
    for state in path:
        print(f"Missionaries: {state.missionaries}, Cannibals: {state.cannibals}, Boat: {'Right' if state.boat == 1 else 'Left'}")


initial_state = State(3, 3, 1)
solution = bfs(initial_state)
if solution:
    print("Solution found:")
    print_solution(solution)
else:
    print("No solution exists")




//OUTPUT
Solution found:
Missionaries: 3, Cannibals: 3, Boat: Right
Missionaries: 3, Cannibals: 1, Boat: Left
Missionaries: 3, Cannibals: 2, Boat: Right
Missionaries: 3, Cannibals: 0, Boat: Left
Missionaries: 3, Cannibals: 1, Boat: Right
Missionaries: 1, Cannibals: 1, Boat: Left
Missionaries: 2, Cannibals: 2, Boat: Right
Missionaries: 0, Cannibals: 2, Boat: Left
Missionaries: 0, Cannibals: 3, Boat: Right
Missionaries: 0, Cannibals: 1, Boat: Left
Missionaries: 1, Cannibals: 1, Boat: Right
Missionaries: 0, Cannibals: 0, Boat: Left


